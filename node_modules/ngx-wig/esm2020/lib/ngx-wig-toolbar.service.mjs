import { Injectable, Inject } from '@angular/core';
import { BUTTONS } from './config';
import * as i0 from "@angular/core";
export class NgxWigToolbarService {
    constructor(buttonLibraryConfig) {
        this._defaultButtonsList = [];
        this._buttonLibrary = buttonLibraryConfig.reduce((acc, val) => ({ ...acc, ...val }), {});
        this._defaultButtonsList = Object.keys(this._buttonLibrary);
    }
    setButtons(buttons) {
        if (!Array.isArray(buttons)) {
            throw new Error('Argument "buttons" should be an array');
        }
        this._defaultButtonsList = buttons;
    }
    addStandardButton(name, title, command, styleClass, icon) {
        if (!name || !title || !command) {
            throw new Error('Arguments "name", "title" and "command" are required');
        }
        styleClass = styleClass || '';
        this._buttonLibrary[name] = { title, command, styleClass, icon };
        this._defaultButtonsList.push(name);
    }
    getToolbarButtons(buttonsList) {
        let buttons = this._defaultButtonsList;
        const toolbarButtons = [];
        if (typeof buttonsList !== 'undefined') {
            buttons = string2array(buttonsList);
        }
        buttons.forEach(buttonKey => {
            if (!buttonKey) {
                return;
            }
            if (!this._buttonLibrary[buttonKey]) {
                throw new Error(`There is no "${buttonKey}" in your library. Possible variants: ${Object.keys(this._buttonLibrary)}`);
            }
            const button = Object.assign({}, this._buttonLibrary[buttonKey]);
            // button.isActive = () => {return !!this.command && document.queryCommandState(this.command);}
            toolbarButtons.push(button);
        });
        return toolbarButtons;
    }
}
NgxWigToolbarService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgxWigToolbarService, deps: [{ token: BUTTONS }], target: i0.ɵɵFactoryTarget.Injectable });
NgxWigToolbarService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgxWigToolbarService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NgxWigToolbarService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [BUTTONS]
                }] }]; } });
function string2array(keysString) {
    return keysString
        .split(',')
        .map(Function.prototype.call, String.prototype.trim);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXdpZy10b29sYmFyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtd2lnL3NyYy9saWIvbmd4LXdpZy10b29sYmFyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUEyQixPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUM7O0FBSzVELE1BQU0sT0FBTyxvQkFBb0I7SUFJL0IsWUFBNkIsbUJBQXFDO1FBSDFELHdCQUFtQixHQUFhLEVBQUUsQ0FBQztRQUl6QyxJQUFJLENBQUMsY0FBYyxHQUFHLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQW1CLEVBQUUsR0FBbUIsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN6SCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVNLFVBQVUsQ0FBQyxPQUFpQjtRQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7U0FDMUQ7UUFFRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsT0FBTyxDQUFDO0lBQ3JDLENBQUM7SUFFTSxpQkFBaUIsQ0FDdEIsSUFBWSxFQUNaLEtBQWEsRUFDYixPQUFlLEVBQ2YsVUFBa0IsRUFDbEIsSUFBWTtRQUVaLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO1NBQ3pFO1FBRUQsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ2pFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVNLGlCQUFpQixDQUFDLFdBQW9CO1FBQzNDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztRQUN2QyxNQUFNLGNBQWMsR0FBYyxFQUFFLENBQUM7UUFFckMsSUFBSSxPQUFPLFdBQVcsS0FBSyxXQUFXLEVBQUU7WUFDdEMsT0FBTyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNyQztRQUVELE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDZCxPQUFPO2FBQ1I7WUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDbkMsTUFBTSxJQUFJLEtBQUssQ0FDYixnQkFBZ0IsU0FBUyx5Q0FBeUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FDckcsQ0FBQzthQUNIO1lBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2pFLCtGQUErRjtZQUMvRixjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQzs7aUhBMURVLG9CQUFvQixrQkFJWCxPQUFPO3FIQUpoQixvQkFBb0IsY0FGbkIsTUFBTTsyRkFFUCxvQkFBb0I7a0JBSGhDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzswQkFLYyxNQUFNOzJCQUFDLE9BQU87O0FBeUQ3QixTQUFTLFlBQVksQ0FBQyxVQUFrQjtJQUN0QyxPQUFPLFVBQVU7U0FDZCxLQUFLLENBQUMsR0FBRyxDQUFDO1NBQ1YsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVEJ1dHRvbkxpYnJhcnksIFRCdXR0b24sIEJVVFRPTlMgfSBmcm9tICcuL2NvbmZpZyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neFdpZ1Rvb2xiYXJTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfZGVmYXVsdEJ1dHRvbnNMaXN0OiBzdHJpbmdbXSA9IFtdO1xuICBwcml2YXRlIF9idXR0b25MaWJyYXJ5OiBUQnV0dG9uTGlicmFyeTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KEJVVFRPTlMpIGJ1dHRvbkxpYnJhcnlDb25maWc6IFRCdXR0b25MaWJyYXJ5W10pIHtcbiAgICB0aGlzLl9idXR0b25MaWJyYXJ5ID0gYnV0dG9uTGlicmFyeUNvbmZpZy5yZWR1Y2UoKGFjYzogVEJ1dHRvbkxpYnJhcnksIHZhbDogVEJ1dHRvbkxpYnJhcnkpID0+ICh7IC4uLmFjYywgLi4udmFsIH0pLCB7fSk7XG4gICAgdGhpcy5fZGVmYXVsdEJ1dHRvbnNMaXN0ID0gT2JqZWN0LmtleXModGhpcy5fYnV0dG9uTGlicmFyeSk7XG4gIH1cblxuICBwdWJsaWMgc2V0QnV0dG9ucyhidXR0b25zOiBzdHJpbmdbXSk6IHZvaWQge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShidXR0b25zKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudCBcImJ1dHRvbnNcIiBzaG91bGQgYmUgYW4gYXJyYXknKTtcbiAgICB9XG5cbiAgICB0aGlzLl9kZWZhdWx0QnV0dG9uc0xpc3QgPSBidXR0b25zO1xuICB9XG5cbiAgcHVibGljIGFkZFN0YW5kYXJkQnV0dG9uKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIGNvbW1hbmQ6IHN0cmluZyxcbiAgICBzdHlsZUNsYXNzOiBzdHJpbmcsXG4gICAgaWNvbjogc3RyaW5nXG4gICkge1xuICAgIGlmICghbmFtZSB8fCAhdGl0bGUgfHwgIWNvbW1hbmQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQXJndW1lbnRzIFwibmFtZVwiLCBcInRpdGxlXCIgYW5kIFwiY29tbWFuZFwiIGFyZSByZXF1aXJlZCcpO1xuICAgIH1cblxuICAgIHN0eWxlQ2xhc3MgPSBzdHlsZUNsYXNzIHx8ICcnO1xuICAgIHRoaXMuX2J1dHRvbkxpYnJhcnlbbmFtZV0gPSB7IHRpdGxlLCBjb21tYW5kLCBzdHlsZUNsYXNzLCBpY29uIH07XG4gICAgdGhpcy5fZGVmYXVsdEJ1dHRvbnNMaXN0LnB1c2gobmFtZSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0VG9vbGJhckJ1dHRvbnMoYnV0dG9uc0xpc3Q/OiBzdHJpbmcpOiB7fVtdIHtcbiAgICBsZXQgYnV0dG9ucyA9IHRoaXMuX2RlZmF1bHRCdXR0b25zTGlzdDtcbiAgICBjb25zdCB0b29sYmFyQnV0dG9uczogVEJ1dHRvbltdID0gW107XG5cbiAgICBpZiAodHlwZW9mIGJ1dHRvbnNMaXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgYnV0dG9ucyA9IHN0cmluZzJhcnJheShidXR0b25zTGlzdCk7XG4gICAgfVxuXG4gICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbktleSA9PiB7XG4gICAgICBpZiAoIWJ1dHRvbktleSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5fYnV0dG9uTGlicmFyeVtidXR0b25LZXldKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgVGhlcmUgaXMgbm8gXCIke2J1dHRvbktleX1cIiBpbiB5b3VyIGxpYnJhcnkuIFBvc3NpYmxlIHZhcmlhbnRzOiAke09iamVjdC5rZXlzKHRoaXMuX2J1dHRvbkxpYnJhcnkpfWBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYnV0dG9uID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fYnV0dG9uTGlicmFyeVtidXR0b25LZXldKTtcbiAgICAgIC8vIGJ1dHRvbi5pc0FjdGl2ZSA9ICgpID0+IHtyZXR1cm4gISF0aGlzLmNvbW1hbmQgJiYgZG9jdW1lbnQucXVlcnlDb21tYW5kU3RhdGUodGhpcy5jb21tYW5kKTt9XG4gICAgICB0b29sYmFyQnV0dG9ucy5wdXNoKGJ1dHRvbik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdG9vbGJhckJ1dHRvbnM7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nMmFycmF5KGtleXNTdHJpbmc6IHN0cmluZykge1xuICByZXR1cm4ga2V5c1N0cmluZ1xuICAgIC5zcGxpdCgnLCcpXG4gICAgLm1hcChGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCwgU3RyaW5nLnByb3RvdHlwZS50cmltKTtcbn1cbiJdfQ==